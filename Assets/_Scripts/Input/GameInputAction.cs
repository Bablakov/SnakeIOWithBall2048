//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/_Scripts/Input/GameInputAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GameInputAction: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GameInputAction()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameInputAction"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""53573fff-a8ae-42be-9ba2-5e72b452b708"",
            ""actions"": [
                {
                    ""name"": ""PositionMouse"",
                    ""type"": ""Value"",
                    ""id"": ""bef9903d-83e6-4de4-bd71-8942049deb82"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""BoostSpeed"",
                    ""type"": ""Button"",
                    ""id"": ""6704e0cd-0367-4ecf-b32c-f12c2c4670cf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""BoostSpeedMobile"",
                    ""type"": ""Button"",
                    ""id"": ""68317f88-ffd6-4107-9d27-568a06e014f8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f894130e-059a-41cc-9dee-28a30e9db8c8"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PositionMouse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fb71ae1e-f5eb-441a-9db0-3907787a2230"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BoostSpeed"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""44aadd6a-f74c-4a0e-86a7-ddbd2801f921"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BoostSpeedMobile"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_PositionMouse = m_Player.FindAction("PositionMouse", throwIfNotFound: true);
        m_Player_BoostSpeed = m_Player.FindAction("BoostSpeed", throwIfNotFound: true);
        m_Player_BoostSpeedMobile = m_Player.FindAction("BoostSpeedMobile", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_PositionMouse;
    private readonly InputAction m_Player_BoostSpeed;
    private readonly InputAction m_Player_BoostSpeedMobile;
    public struct PlayerActions
    {
        private @GameInputAction m_Wrapper;
        public PlayerActions(@GameInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @PositionMouse => m_Wrapper.m_Player_PositionMouse;
        public InputAction @BoostSpeed => m_Wrapper.m_Player_BoostSpeed;
        public InputAction @BoostSpeedMobile => m_Wrapper.m_Player_BoostSpeedMobile;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @PositionMouse.started += instance.OnPositionMouse;
            @PositionMouse.performed += instance.OnPositionMouse;
            @PositionMouse.canceled += instance.OnPositionMouse;
            @BoostSpeed.started += instance.OnBoostSpeed;
            @BoostSpeed.performed += instance.OnBoostSpeed;
            @BoostSpeed.canceled += instance.OnBoostSpeed;
            @BoostSpeedMobile.started += instance.OnBoostSpeedMobile;
            @BoostSpeedMobile.performed += instance.OnBoostSpeedMobile;
            @BoostSpeedMobile.canceled += instance.OnBoostSpeedMobile;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @PositionMouse.started -= instance.OnPositionMouse;
            @PositionMouse.performed -= instance.OnPositionMouse;
            @PositionMouse.canceled -= instance.OnPositionMouse;
            @BoostSpeed.started -= instance.OnBoostSpeed;
            @BoostSpeed.performed -= instance.OnBoostSpeed;
            @BoostSpeed.canceled -= instance.OnBoostSpeed;
            @BoostSpeedMobile.started -= instance.OnBoostSpeedMobile;
            @BoostSpeedMobile.performed -= instance.OnBoostSpeedMobile;
            @BoostSpeedMobile.canceled -= instance.OnBoostSpeedMobile;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);
    public interface IPlayerActions
    {
        void OnPositionMouse(InputAction.CallbackContext context);
        void OnBoostSpeed(InputAction.CallbackContext context);
        void OnBoostSpeedMobile(InputAction.CallbackContext context);
    }
}
